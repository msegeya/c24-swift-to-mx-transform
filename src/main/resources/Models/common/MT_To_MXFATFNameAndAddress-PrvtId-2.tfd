<?xml version="1.0" ?>
<transform IOversion="3.1.0" readOnly="false" encrypted="false" targetNamespace="http://www.c24.biz/IO/Transforms/Common" processingOrder="Outputs" validateInputs="false" validateOutputs="true" saveLayout="true" name="MT_To_MXFATFNameAndAddress-PrvtId-2.tfd">
  <input endID="0" typeRef="#string" path="" required="false"></input>
  <input endID="1" modelRef="../SWIFT FIN November 2015 Data Dictionary.dod" typeRef="Data Field Dictionary/Subfields/Name And Address 50F" path="" required="true"></input>
  <contextPath input="true" endID="0" contextRef="" id="O003000000000100010000"></contextPath>
  <contextPath input="true" endID="1" contextRef="" id="O003000000000101"></contextPath>
  <contextPath input="false" endID="0" contextRef="" id="O000"></contextPath>
  <transformMethod name="INSTANCE" x="1035" y="49" id="O00000"></transformMethod>
  <javaMethodRef refId="parseFATFId_O0020000" x="837" y="96" id="O0010000"></javaMethodRef>
  <transformMethod name="FIRST" x="679" y="92" id="O001000000"></transformMethod>
  <transformMethod name="XPATH" type="#string" x="560" y="96" id="O00100000000"></transformMethod>
  <constant constant="./NameAndAddressSubfield2[NameAndAddressNumCode=7]/NameAndAddressDetails" id="O0010000000000"></constant>
  <transformMethod name="IF" model="../SWIFT FIN November 2015 Data Dictionary.dod" type="Data Field Dictionary/Subfields/Name And Address 50F" x="401" y="106" id="O0010000000001"></transformMethod>
  <transformMethod name="AND" x="294" y="78" id="O001000000000100"></transformMethod>
  <transformMethod name="NOT" x="185" y="30" id="O00100000000010000"></transformMethod>
  <transformMethod name="EQUALS" x="93" y="28" id="O0010000000001000000"></transformMethod>
  <constant constant="NIDN" id="O001000000000100000001"></constant>
  <transformMethod name="NOT" x="184" y="138" id="O00300000000010000"></transformMethod>
  <transformMethod name="EQUALS" x="94" y="137" id="O0030000000001000000"></transformMethod>
  <constant constant="IBEI" id="O003000000000100000001"></constant>
  <constant constant="null" id="O003000000000102"></constant>
  <constant constant="false" id="O001000001"></constant>
  <constant constant="2" id="O0000001"></constant>
  <contextPath input="false" endID="1" contextRef="" id="O001"></contextPath>
  <transformMethod name="INSTANCE" x="1042" y="143" id="O00100"></transformMethod>
  <constant constant="1" id="O0010001"></constant>
  <contextPath input="false" endID="2" contextRef="" id="O002"></contextPath>
  <transformMethod name="INSTANCE" x="1058" y="244" id="O00200"></transformMethod>
  <javaMethodRef refId="parseFATFId_O0020000" x="847" y="271" id="O0030000"></javaMethodRef>
  <transformMethod name="FIRST" x="685" y="225" id="O003000000"></transformMethod>
  <transformMethod name="XPATH" type="#string" x="568" y="225" id="O00300000000"></transformMethod>
  <constant constant="./NameAndAddressSubfield2[NameAndAddressNumCode=6]/NameAndAddressDetails" id="O0030000000000"></constant>
  <transformMethod name="IF" model="../SWIFT FIN November 2015 Data Dictionary.dod" type="Data Field Dictionary/Subfields/Name And Address 50F" x="411" y="234" id="O0030000000001"></transformMethod>
  <transformMethod name="AND" x="299" y="204" id="O003000000000100"></transformMethod>
  <transformMethod name="NOT" x="179" y="267" id="O00300000000010001"></transformMethod>
  <transformMethod name="EQUALS" x="86" y="270" id="O0030000000001000100"></transformMethod>
  <constant constant="CUST" id="O003000000000100010001"></constant>
  <constant constant="true" id="O003000001"></constant>
  <constant constant="2" id="O0020001"></constant>
  <contextPath input="false" endID="3" contextRef="" id="O003"></contextPath>
  <transformMethod name="INSTANCE" x="1064" y="380" id="O00300"></transformMethod>
  <constant constant="1" id="O0030001"></constant>
  <translation inputID="O00000" inputPort="0" outputID="O000" outputPort="0"></translation>
  <translation inputID="O0010000" inputPort="0" outputID="O00000" outputPort="0"></translation>
  <translation inputID="O001000000" inputPort="0" outputID="O0010000" outputPort="0"></translation>
  <translation inputID="O00100000000" inputPort="0" outputID="O001000000" outputPort="0"></translation>
  <translation inputID="O0010000000000" inputPort="0" outputID="O00100000000" outputPort="0"></translation>
  <translation inputID="O001000000000100" inputPort="0" outputID="O0010000000001" outputPort="0"></translation>
  <translation inputID="O00100000000010000" inputPort="0" outputID="O001000000000100" outputPort="0"></translation>
  <translation inputID="O0010000000001000000" inputPort="0" outputID="O00100000000010000" outputPort="0"></translation>
  <translation inputID="O003000000000100010000" inputPort="0" outputID="O0010000000001000000" outputPort="0"></translation>
  <translation inputID="O001000000000100000001" inputPort="0" outputID="O0010000000001000000" outputPort="1"></translation>
  <translation inputID="O0030000000001000000" inputPort="0" outputID="O00300000000010000" outputPort="0"></translation>
  <translation inputID="O003000000000100010000" inputPort="0" outputID="O0030000000001000000" outputPort="0"></translation>
  <translation inputID="O003000000000100000001" inputPort="0" outputID="O0030000000001000000" outputPort="1"></translation>
  <translation inputID="O00300000000010000" inputPort="0" outputID="O001000000000100" outputPort="1"></translation>
  <translation inputID="O003000000000101" inputPort="0" outputID="O0010000000001" outputPort="1"></translation>
  <translation inputID="O003000000000102" inputPort="0" outputID="O0010000000001" outputPort="2"></translation>
  <translation inputID="O0010000000001" inputPort="0" outputID="O00100000000" outputPort="1"></translation>
  <translation inputID="O001000001" inputPort="0" outputID="O0010000" outputPort="1"></translation>
  <translation inputID="O0000001" inputPort="0" outputID="O00000" outputPort="1"></translation>
  <translation inputID="O00100" inputPort="0" outputID="O001" outputPort="0"></translation>
  <translation inputID="O0010000" inputPort="0" outputID="O00100" outputPort="0"></translation>
  <translation inputID="O0010001" inputPort="0" outputID="O00100" outputPort="1"></translation>
  <translation inputID="O00200" inputPort="0" outputID="O002" outputPort="0"></translation>
  <translation inputID="O0030000" inputPort="0" outputID="O00200" outputPort="0"></translation>
  <translation inputID="O003000000" inputPort="0" outputID="O0030000" outputPort="0"></translation>
  <translation inputID="O00300000000" inputPort="0" outputID="O003000000" outputPort="0"></translation>
  <translation inputID="O0030000000000" inputPort="0" outputID="O00300000000" outputPort="0"></translation>
  <translation inputID="O003000000000100" inputPort="0" outputID="O0030000000001" outputPort="0"></translation>
  <translation inputID="O00300000000010000" inputPort="0" outputID="O003000000000100" outputPort="0"></translation>
  <translation inputID="O0030000000001000100" inputPort="0" outputID="O00300000000010001" outputPort="0"></translation>
  <translation inputID="O003000000000100010000" inputPort="0" outputID="O0030000000001000100" outputPort="0"></translation>
  <translation inputID="O003000000000100010001" inputPort="0" outputID="O0030000000001000100" outputPort="1"></translation>
  <translation inputID="O00300000000010001" inputPort="0" outputID="O003000000000100" outputPort="1"></translation>
  <translation inputID="O003000000000101" inputPort="0" outputID="O0030000000001" outputPort="1"></translation>
  <translation inputID="O003000000000102" inputPort="0" outputID="O0030000000001" outputPort="2"></translation>
  <translation inputID="O0030000000001" inputPort="0" outputID="O00300000000" outputPort="1"></translation>
  <translation inputID="O003000001" inputPort="0" outputID="O0030000" outputPort="1"></translation>
  <translation inputID="O0020001" inputPort="0" outputID="O00200" outputPort="1"></translation>
  <translation inputID="O00300" inputPort="0" outputID="O003" outputPort="0"></translation>
  <translation inputID="O0030000" inputPort="0" outputID="O00300" outputPort="0"></translation>
  <translation inputID="O0030001" inputPort="0" outputID="O00300" outputPort="1"></translation>
  <documentation>
    <notes>&lt;h3&gt;MT_To_MXFATFNameAndAddress-PrvtId-2&lt;/h3&gt;
&lt;b&gt;(substitution of MT_To_MXFATFNameAndAddress)&lt;/b&gt;


&lt;b&gt;Business description&lt;/b&gt;
Subfield 2 of an MT field 50F identifies the Ordering Customer in line with FATF Special Recommendation VII by combining:
&lt;ul&gt;
&lt;li&gt;name and address&lt;/li&gt;
&lt;li&gt;name and date and place of birth&lt;/li&gt;
&lt;li&gt;name and national identity number&lt;/li&gt;
&lt;li&gt;name and customer number&lt;/li&gt;
&lt;/ul&gt;
Every line in Subfield 2 of field 50F starts with a number indicating the type of information provided. This function translates the structured information in the MT to MX FATF compliant equivalents by:
&lt;li&gt;checking the numbers to determine the MX target element&lt;/li&gt;
&lt;li&gt;checking whether numbers are repeated if allowed by the format description on the&lt;/li&gt;
following line. If so, the information following the number will be completed prior to the translation.

&lt;b&gt;Note&lt;/b&gt;. This substitution of MT_To_MXFATFNameAndAddress for MT to the Private identifier translation only. All rest part of functional implemented in MT_To_MXFATFNameAndAddress-PstlAddr-1.tfd.


&lt;b&gt;Format&lt;/b&gt;
MT_To_MXFATFNameAndAddress-PrvtId(MTPartyIdentifier, MTNameAndAddress ; MXFATFId)

&lt;b&gt;Input&lt;/b&gt;
&lt;tt&gt;MTPartyIdentifier&lt;/tt&gt;: Subfield 1 of field 50F carrying an account number or other FATF compliant customer identification
&lt;tt&gt;MTNameAndAddress&lt;/tt&gt;: Subfield 2 of field 50F carrying an FATF compliant customer name and address or identifications in line with the format description of field 50F (date and place of birth, customer number or national identity number).

&lt;b&gt;Output&lt;/b&gt;
&lt;tt&gt;NIDN&lt;/tt&gt;: the result of translation of the NationalIdentity Number present on line starting with  "/7" (see format description for details).
&lt;tt&gt;Issuer&lt;/tt&gt;: the result of translation of the Issuer present on line starting with  "/7" (see format description for details).
&lt;tt&gt;CUST&lt;/tt&gt;: the result of translation of the Customer Number present on line starting with “6/”  (see format description for details).
&lt;tt&gt;Issuer&lt;/tt&gt;: the result of translation of the Issuer present on line starting with  "/6" (see format description for details).

&lt;b&gt;Preconditions&lt;/b&gt;
MTNameAndAddress must carry the name of the ordering customer so at least one line must start with “1/”.

&lt;b&gt;Formal description&lt;/b&gt;
&lt;pre&gt;
/*
  The section below describes the translation of date and place of birth (lines starting with “4/” and “5/”), customer number
  (lines starting with “6/”) or national identity number (lines starting with “7/”). These translations are subject to the
  presence of the code “IBEI” in the PartyIdentifier of field 50F (subfield 1): a code “IBEI” translates to the
  Identification.OrganisationIdentification element, ruling out any translation towards the
  Identification.PrivateIdentification element (target of date and place of birth, customer number or national identity
  number translation) as both elements are mutually exclusive in the Identification element (“choice component”). If the
  PartyIdentifier of field 50F carries a code different than “IBEI”, then date and place of birth, customer number and/or
  national identity number -if the conditions for their translation are met- will translate to different instances of the
  PrivateIdentification component
*/
IF Substring(MTPartyIdentifier, 1, 4) NOT = “IBEI”
    /* Translation of customer number present on a line starting with “6/” */
    /*
       Check whether Subfield 1 of field 50F (MTPartyIdentifier) carries a customer number. If this is the case, a line
       starting with “6/” is ignored as the customer number in the MTPartyIdentifier will be translated
    */
    IF Substring(MTPartyIdentifier, 1, 4) NOT = “CUST”
        /* Check whether “6/” is present by using the ExtractPattern and Length functions */
        IF Length(ExtractPattern(MTNameAndAddress, “6/”)) &gt; 0
            /*
               Basic function ExtractLines extracts the customer details. “6/” must not be repeated so the function is used
               without continuation string to limit the extraction to a maximum of one line. If “6/” is repeated, then only
               the first occurrence is translated. MTCode6 is a local variable. Substring is taken to delete “6/” in the
               output string
            */
            MTCode6 = Substring(ExtractLines(MTNameAndAddress, “6/”), 3)
            /*
               Assumption is that the source message is correct. Therefore a customer number should be in line with field 50F
               format specifications: “6/” must be followed by the country code, a slash, the issuer of the number, a slash
               and the customer identification number. Split the number from the combination of country and issuer. MTIssuer
               and MTNum are local variables
            */
            MTIssuer = ExtractTillPattern(Substring(MTCode6, 4), “/”)
            MTNum = ExtractFromPattern(Substring(MTCode6, 4), “/”)
            /* Write number and issuer in a next occurrence of the target PrivateIdentification component */
            Identification.PrivateIdentification.CustomerNumber = MTNum
            Identification.PrivateIdentification.Issuer = MTIssuer
        ENDIF
    ENDIF
    /* Translation of national identity number present on a line starting with “7/” */
    /*
       Check whether Subfield 1 of field 50F (MTPartyIdentifier) carries a national identity number. If this is the case, a
       line starting with “7/” is ignored as the identity number in the MTPartyIdentifier will be translated
    */
    IF Substring(MTPartyIdentifier, 1, 4) NOT = “NIDN”
        /* Check whether “7/” is present by using the ExtractPattern and Length functions */
        IF Length(ExtractPattern(MTNameAndAddress, “7/”)) &gt; 0
            /*
               Basic function ExtractLines extracts the customer details. “7/” must not be repeated so the function is used
               without continuation string to limit the extraction to a maximum of one line. If “7/” is repeated, then only
               the first occurrence is translated. MTCode7 is a local variable. Substring is taken to delete “7/” in the
               output string
            */
            MTCode7 = Substring(ExtractLines(MTNameAndAddress, “7/”), 3)
            /*
               Assumption is that the source message is correct. Therefore a national identity number should be in line with
               field 50F format specifications: “7/” must be followed by the country code, a slash and the national identity
               number
            */
            /* Write the number and the country in a next occurrence of the target PrivateIdentification component */
            Identification.PrivateIdentification.IdentityCardNumber = Substring(MTCode7, 4)
            Identification.PrivateIdentification.Issuer = Substring(MTCode7, 1, 2)
        ENDIF
    ENDIF
ENDIF
&lt;pre&gt;</notes>
  </documentation>
  <output endID="0" typeRef="#string" path="" required="false"></output>
  <output endID="1" typeRef="#string" path="" required="false"></output>
  <output endID="2" typeRef="#string" path="" required="false"></output>
  <output endID="3" typeRef="#string" path="" required="false"></output>
  <javaMethod id="parseFATFId_O0020000">
    <libraryMethod>false</libraryMethod>
    <methodName>parseFATFId</methodName>
    <input role="theFATFId" type="#string"></input>
    <input role="isIssuerPresent" type="#boolean"></input>
    <output type="#string[]"></output>
    <code>if (null == theFATFId || 2 &gt; theFATFId.length()) return null;
final java.util.List result = new java.util.ArrayList();
result.add(theFATFId.substring(0, 2));
int pos = theFATFId.indexOf('/', 3);
if (0 &gt; pos || !isIssuerPresent) pos = 2;
result.add(theFATFId.substring(0, pos));
pos++;
if (theFATFId.length() - pos &gt; 35) {
    result.add(theFATFId.substring(pos, pos + 35));
} else {
    result.add(theFATFId.substring(pos));
}
return (String[]) result.toArray(new String[result.size()]);</code>
  </javaMethod>
  <transformTestSuite></transformTestSuite>
</transform>